package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;
import rs.ac.bg.etf.pp1.ast.*;

parser code {:

    boolean errorDetected = false;
	Logger log = Logger.getLogger(getClass());

    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }

    public void Identificator(Symbol cur_token) {
        errorDetected = true;
        StringBuilder msg = new StringBuilder("\u001B[31m");
        msg.append("Syntax error");
        if (cur_token != null)
            msg.append(" - symbol ").append(cur_token);

        msg.append("\u001B[0m");
        log.error(msg);
    }

    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatal error, parsing aborted", cur_token);
    }

    public void report_error(String message, Object info) {
            errorDetected = true;
            StringBuilder msg = new StringBuilder("\u001B[31m");
            msg.append("Syntax error");
            if (cur_token != null)
                msg.append(" - symbol \"").append(cur_token.value).append("\" [").append(cur_token).append("]");

            msg.append("\u001B[0m");
            log.error(msg);
    }

    public void report_recovery(String message, Object info) {
            errorDetected = true;

            StringBuilder msg = new StringBuilder("\u001B[32m");
            if (info != null)
                msg.append("line ").append(String.format("%3d", info)).append(" - ");

            msg.append(message).append("\u001B[0m");
            log.error(msg);
    }

:}


scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null)
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}


